# A utility function to count
# inversions in given array 'arr[]'
def getInvCount(arr):
	inv_count = 0
	empty_value = -1
	for i in range(0, 9):
		for j in range(i + 1, 9):
			if arr[j] != empty_value and arr[i] != empty_value and arr[i] > arr[j]:
				inv_count += 1
	return inv_count
    # This function returns true
# if given 8 puzzle is solvable.
def isSolvable(puzzle) :
 
    # Count inversions in given 8 puzzle
    inv_count = getInvCount([j for sub in puzzle for j in sub])
    print("Total Number of Inversions:", inv_count)
 
    # return true if inversion count is even.
    return (inv_count % 2 == 0)
    # Main Code
test1_puzzle = [[8, 1, 2],[-1, 4, 3],[7, 6, 5]] # -1 represent empty tile, this example is not solvable
test2_puzzle = [[5, 2, 8],[4, 1, 7],[-1, 3, 6]] # this example is solvable

if(isSolvable(test2_puzzle)) :
    print("Solvable")
else :
    print("Not Solvable")
